原型模式的核心在于如何实现克隆方法，下面将介绍两种在Java语言中常用的克隆实现方法：
    1.通用实现方法
        通用的克隆实现方法是在具体原型类的克隆方法中实例化一个与自身类型相同的对象并将其
        返回，并将相关的参数传入新创建的对象中，保证它们的成员属性相同。
    能否将上述代码中的clone()方法写成：public Prototype clone() { return this; }？给出你的理由。
    不能，怎样就返回的就是对象本身，是同一个对象。

浅克隆(ShallowClone)和深克隆(DeepClone)
    1.浅克隆
        在浅克隆中，如果原型对象的成员变量是值类型，将复制一份给克隆对象；如果原型对象的
        成员变量是引用类型，则将引用对象的地址复制一份给克隆对象，也就是说原型对象和克隆
        对象的成员变量指向相同的内存地址
    2.深克隆
        在深克隆中，无论原型对象的成员变量是值类型还是引用类型，都将复制一份给克隆对象，
        深克隆将原型对象的所有引用对象也复制一份给克隆对象

        要实现深克隆，可以通过序列化(Serialization)等方式来实现。序列化就
        是将对象写到流的过程，写到流中的对象是原有对象的一个拷贝，而原对象仍然存在于内存
        中。通过序列化实现的拷贝不仅可以复制对象本身，而且可以复制其引用的成员对象，因此
        通过序列化将对象写到一个流中，再从流里将其读出来，可以实现深克隆。需要注意的是能
        够实现序列化的对象其类必须实现Serializable接口，否则无法实现序列化操作。