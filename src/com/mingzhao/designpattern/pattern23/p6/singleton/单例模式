为什么要将成员变量tm定义为静态变量？
  Singleton.singleton = Singleton.getInstance();  
  Singleton.singleton = null;
  Singleton.singleton = Singleton.getInstance();  
字段singletone被暴露出去后你就不能确保单例了

单例模式定义如下：
    单例模式(Singleton Pattern)：确保某一个类只有一个实
    例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方
    法。单例模式是一种对象创建型模式。

    单例模式有三个要点：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它
    必须自行向整个系统提供这个实例。

    Singleton（单例）：在单例类的内部实现只生成一个实例，同时它提供一个静态的
    getInstance()工厂方法，让客户可以访问它的唯一实例；为了防止在外部对其实例化，将其构
    造函数设计为私有；在单例类内部定义了一个Singleton类型的静态对象，作为外部共享的唯一
    实例。

现在我们对负载均衡器的实现代码进行再次分析，当第一次调用getLoadBalancer()方法创建并
启动负载均衡器时，instance对象为null值，因此系统将执行代码instance= new
LoadBalancer()，在此过程中，由于要对LoadBalancer进行大量初始化工作，需要一段时间来创
建LoadBalancer对象。而在此时，如果再一次调用getLoadBalancer()方法（通常发生在多线程
环境中），由于instance尚未创建成功，仍为null值，判断条件(instance== null)为真值，因此代
码instance= new LoadBalancer()将再次执行，导致最终创建了多个instance对象，这违背了单例
模式的初衷，也导致系统运行发生错误。
    一、懒汉式单例
    在类加载的时候不创建单例实例。只有在第一次请求实例的时候的时候创建，并且只在第一次创建后，以后不再创建该类的实例。

    懒汉式单例类在getInstance()方法前面增加了关键字synchronized进行线程锁，以处理多个线
    程同时访问的问题。但是，虽然解决了线程安全问题，但是每次调用getInstance()时
    都需要进行线程锁定判断，在多线程高并发访问环境中，将会导致系统性能大大降低。如何
    既解决线程安全问题又不影响系统性能呢？我们继续对懒汉式单例进行改进。事实上，我们
    无须对整个getInstance()方法进行锁定，只需对其中的代码“instance = new LazySingleton();”进
    行锁定即可。

    二、饿汉式单例
    在类被加载的时候，唯一实例已经被创建。

    当类被加载时，静态变量instance会被初始化，此时类的私有构造函数会被调用，单例类的唯
    一实例将被创建。如果使用饿汉式单例来实现负载均衡器LoadBalancer类的设计，则不会出现
    创建多个单例对象的情况，可确保单例对象的唯一性。
